
#include "PortInfo.h"

namespace CUtils
{

/*******************************************************************************
 *
 ******************************************************************************/
PortInfo::PortInfo() : handle(INVALID_HANDLE_VALUE), params(), name()
{
    params.DCBlength = sizeof(DCB);
}

/*******************************************************************************
 *
 ******************************************************************************/
bool PortInfo::isOpen()
{
    return handle != INVALID_HANDLE_VALUE;
}

/*******************************************************************************
 *
 ******************************************************************************/
void PortInfo::reset()
{
    handle = INVALID_HANDLE_VALUE;
    name = "";
}

/*******************************************************************************
 *
 ******************************************************************************/
bool PortInfo::getConfig()
{
    bool result = false;

    if (handle != INVALID_HANDLE_VALUE)
    {
        COMMCONFIG cc;
        DWORD ccsize = sizeof(COMMCONFIG);

        cc.dwSize = ccsize;

        BOOL getr = ::GetCommConfig(handle, &cc, &ccsize);

        this->params = cc.dcb;

        result = getr == TRUE;
    }

    return result;
}

/*******************************************************************************
 *
 ******************************************************************************/
bool PortInfo::setConfig()
{
    BOOL result = ::SetCommState(handle, &params);

    return result == TRUE ? true : false;
}

/*******************************************************************************
 *
 ******************************************************************************/
bool PortInfo::isBinaryMode()
{
    return params.fNull == FALSE && params.fErrorChar == FALSE;
}

/*******************************************************************************
 *
 ******************************************************************************/
uint32_t PortInfo::getBaudRate()
{
    return params.BaudRate;
}

/*******************************************************************************
 *
 ******************************************************************************/
WordSize PortInfo::getWordSize()
{
    return (WordSize)params.ByteSize;
}

/*******************************************************************************
 *
 ******************************************************************************/
Parity PortInfo::getParity()
{
    return (Parity)params.Parity;
}

/*******************************************************************************
 *
 ******************************************************************************/
StopBits PortInfo::getStopBits()
{
    return (StopBits)params.StopBits;
}

/*******************************************************************************
 *
 ******************************************************************************/
bool PortInfo::isCtsEnabled()
{
    return params.fOutxCtsFlow == TRUE;
}

/*******************************************************************************
 *
 ******************************************************************************/
bool PortInfo::isDsrEnabled()
{
    return params.fOutxDsrFlow == TRUE;
}

/*******************************************************************************
 *
 ******************************************************************************/
DtrControl PortInfo::getDtrControl()
{
    return (DtrControl)params.fDtrControl;
}

/*******************************************************************************
 *
 ******************************************************************************/
RtsControl PortInfo::getRtsControl()
{
    return (RtsControl)params.fRtsControl;
}

/*******************************************************************************
 *
 ******************************************************************************/
bool PortInfo::isSwFlowControl(bool isOutput)
{
    DWORD value = isOutput ? params.fOutX : params.fInX;
    return value == TRUE;
}

/*******************************************************************************
 *
 ******************************************************************************/
void PortInfo::setBinaryMode(bool enabled)
{
    unsigned long offWord = enabled ? FALSE : TRUE;

    // No replacement of bytes with parity error
    params.fErrorChar = offWord;
    params.fNull = offWord;
}

/*******************************************************************************
 *
 ******************************************************************************/
void PortInfo::setBaudRate(uint32_t rate)
{
    params.BaudRate = rate;
}

/*******************************************************************************
 *
 ******************************************************************************/
void PortInfo::setWordSize(WordSize size)
{
    params.ByteSize = (BYTE)size;
}

/*******************************************************************************
 *
 ******************************************************************************/
void PortInfo::setParity(Parity parity)
{
    params.Parity = (BYTE)parity;
}

/*******************************************************************************
 *
 ******************************************************************************/
void PortInfo::setStopBits(StopBits stopBits)
{
    params.StopBits = (BYTE)stopBits;
}

/*******************************************************************************
 *
 ******************************************************************************/
void PortInfo::setCtsEnabled(bool enabled)
{
    params.fOutxCtsFlow = enabled ? TRUE : FALSE;
}

/*******************************************************************************
 *
 ******************************************************************************/
void PortInfo::setDsrEnabled(bool enabled)
{
    params.fOutxDsrFlow = enabled ? TRUE : FALSE;
}

/*******************************************************************************
 *
 ******************************************************************************/
void PortInfo::setDtrControl(DtrControl control)
{
    params.fDtrControl = (BYTE)control;
}

/*******************************************************************************
 *
 ******************************************************************************/
void PortInfo::setRtsControl(RtsControl control)
{
    params.fRtsControl = (BYTE)control;
}

/*******************************************************************************
 *
 ******************************************************************************/
void PortInfo::setSwFlowControl(bool isOutput, bool enabled)
{
    if (isOutput)
    {
        params.fOutX = enabled ? TRUE : FALSE;
    }
    else
    {
        params.fInX = enabled ? TRUE : FALSE;
    }
}

} // namespace CUtils
